// Script para testar todas as funcionalidades da API
const API_BASE_URL = "http://localhost:3000"

async function testAPI() {
  console.log("üß™ Iniciando testes da API...")

  try {
    // Teste 1: Verificar se API est√° rodando
    console.log("\n1Ô∏è‚É£ Testando conex√£o com API...")
    const healthCheck = await fetch(`${API_BASE_URL}/cadastro`)
    if (healthCheck.ok) {
      console.log("‚úÖ API est√° rodando corretamente!")
    } else {
      throw new Error("‚ùå API n√£o est√° respondendo")
    }

    // Teste 2: Criar usu√°rio
    console.log("\n2Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...")
    const novoUsuario = {
      nome: "Teste Usu√°rio",
      email: "teste@exemplo.com",
      idade: "25",
    }

    const createResponse = await fetch(`${API_BASE_URL}/cadastro`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(novoUsuario),
    })

    if (createResponse.ok) {
      const usuarioCriado = await createResponse.json()
      console.log("‚úÖ Usu√°rio criado com sucesso:", usuarioCriado.nome)

      // Teste 3: Atualizar usu√°rio
      console.log("\n3Ô∏è‚É£ Testando atualiza√ß√£o de usu√°rio...")
      const usuarioAtualizado = {
        nome: "Teste Usu√°rio Atualizado",
        email: "teste.atualizado@exemplo.com",
        idade: "30",
      }

      const updateResponse = await fetch(`${API_BASE_URL}/cadastro/${usuarioCriado.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(usuarioAtualizado),
      })

      if (updateResponse.ok) {
        console.log("‚úÖ Usu√°rio atualizado com sucesso!")

        // Teste 4: Deletar usu√°rio
        console.log("\n4Ô∏è‚É£ Testando exclus√£o de usu√°rio...")
        const deleteResponse = await fetch(`${API_BASE_URL}/cadastro/${usuarioCriado.id}`, {
          method: "DELETE",
        })

        if (deleteResponse.ok) {
          console.log("‚úÖ Usu√°rio deletado com sucesso!")
        } else {
          console.log("‚ùå Erro ao deletar usu√°rio")
        }
      } else {
        console.log("‚ùå Erro ao atualizar usu√°rio")
      }
    } else {
      console.log("‚ùå Erro ao criar usu√°rio")
    }

    // Teste 5: Listar usu√°rios
    console.log("\n5Ô∏è‚É£ Testando listagem de usu√°rios...")
    const listResponse = await fetch(`${API_BASE_URL}/cadastro`)
    if (listResponse.ok) {
      const usuarios = await listResponse.json()
      console.log(`‚úÖ Listagem funcionando! Total de usu√°rios: ${usuarios.length}`)
    } else {
      console.log("‚ùå Erro ao listar usu√°rios")
    }

    console.log("\nüéâ TODOS OS TESTES PASSARAM! API est√° funcionando perfeitamente!")
  } catch (error) {
    console.error("\n‚ùå ERRO NOS TESTES:", error.message)
    console.log("\nüí° Certifique-se de que:")
    console.log("   - O servidor est√° rodando (npm start)")
    console.log("   - MongoDB est√° conectado")
    console.log("   - N√£o h√° firewall bloqueando a porta 3000")
  }
}

// Executar testes
testAPI()
